unit Cadastro.Model.Conexao.FireDAC.Conexao;

interface

uses
  Cadastro.Model.Conexao.Interfaces,
  FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.VCLUI.Wait,
  Data.DB, FireDAC.Comp.Client, FireDAC.Comp.DataSet,
  FireDAC.Phys.PGDef, FireDAC.Phys.PG,
  FireDAC.Phys.MySQLDef, FireDAC.Phys.MySQL;

type
   TModelConexaoFireDACConexao = class(TInterfacedObject, IModelConexao)
   private
      { Private declarations }
      fPGDriverLink: TFDPhysPgDriverLink;
      fMYSQLDriverLink: TFDPhysMYSQLDriverLink;
      fConexao: TFDConnection;
   protected
      { Protected declarations }
   public
      { Public declarations }
      constructor Create;
      destructor Destroy; override;
      class function New: IModelConexao;
      function Connection: TObject;
      function Driver: String;
   end;

implementation

uses
   SysUtils, System.IOUtils,
   Cadastro.Model.Interfaces,
   EasyMoneyServer.Model.Configuracao;

{ TModelConexaoFireDACConexao }

function TModelConexaoFireDACConexao.Connection: TObject;
begin
   Result := fConexao;
end;

constructor TModelConexaoFireDACConexao.Create;
var
   AConfiguracao: IModelConfiguracao;
   AConfigFileName: TFileName;
   AHomePath: String;
begin
   AHomePath := ExtractFilePath(ParamStr(0));
   fConexao := TFDConnection.Create(Nil);
   // MySQL / MariaDB driver link
   fMYSQLDriverLink := TFDPhysMYSQLDriverLink.Create(Nil);
   fMYSQLDriverLink.VendorHome := AHomePath;
   // PostgreSQL driver link
   fPGDriverLink := TFDPhysPgDriverLink.Create(Nil);
   fPGDriverLink.VendorHome := AHomePath;

   {$IFDEF MSWINDOWS}
   AHomePath := IncludeTrailingPathDelimiter(AHomePath) + 'data';
   if not DirectoryExists(AHomePath) then
      ForceDirectories(AHomePath);
   {$ELSE}
   AHomePath := TPath.GetDocumentsPath;
   {$ENDIF}

   AConfigFileName := TPath.Combine(AHomePath, ChangeFileExt(ExtractFileName(ParamStr(0)), '.s3db'));

   AConfiguracao := TModelConfiguracao.New(AConfigFileName);

   with fConexao do
      begin
         ConnectedStoredUsage := ConnectedStoredUsage - [auDesignTime, auRunTime];
         Params.DriverID := TModelConfiguracao(AConfiguracao).GetDBDriver;
         Params.Values['Server'] := TModelConfiguracao(AConfiguracao).GetDBHost;
         Params.Values['Port'] := IntToStr(TModelConfiguracao(AConfiguracao).GetDBPort);
         Params.DataBase := TModelConfiguracao(AConfiguracao).GetDBName;
         Params.UserName := TModelConfiguracao(AConfiguracao).GetDBUser;
         Params.Password := TModelConfiguracao(AConfiguracao).GetDBPassword;
         Connected := True;
      end;
end;

destructor TModelConexaoFireDACConexao.Destroy;
begin
   FreeAndNil(fConexao);
   FreeAndNil(fMYSQLDriverLink);
   FreeAndNil(fPGDriverLink);
   inherited;
end;

function TModelConexaoFireDACConexao.Driver: String;
begin
   Result := fConexao.Params.DriverID;
end;

class function TModelConexaoFireDACConexao.New: IModelConexao;
begin
   Result := Self.Create;
end;

end.
